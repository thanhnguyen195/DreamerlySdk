// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DreamerlySdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
@_exported import DreamerlySdk
import Foundation
import StoreKit
import Swift
import SwiftUI
import SwiftyStoreKit
import WalletConnectSwift
import _Concurrency
import _StringProcessing
final public class Glaip : Foundation.ObservableObject {
  final public let title: Swift.String
  final public let description: Swift.String
  final public let clientUrl: Swift.String
  final public let supportedWallets: [DreamerlySdk.WalletType]
  final public var currentWallet: DreamerlySdk.WalletType?
  @Combine.Published @_projectedValueProperty($userState) final public var userState: DreamerlySdk.UserState {
    get
    set
    _modify
  }
  final public var $userState: Combine.Published<DreamerlySdk.UserState>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(title: Swift.String, description: Swift.String, clientUrl: Swift.String, supportedWallets: [DreamerlySdk.WalletType])
  final public func loginUser(type: DreamerlySdk.WalletType, completion: @escaping (Swift.Result<DreamerlySdk.User, Swift.Error>) -> Swift.Void)
  final public func logout()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol WalletService {
  func connect(wallet: DreamerlySdk.WalletType, completion: @escaping (Swift.Result<DreamerlySdk.WalletDetails, Swift.Error>) -> Swift.Void)
  func sign(wallet: DreamerlySdk.WalletType, message: Swift.String, completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
}
public struct WalletDetails {
  public let address: Swift.String
  public let chainId: Swift.Int
  public init(address: Swift.String, chainId: Swift.Int)
}
final public class WalletLinkService : DreamerlySdk.WalletService {
  public init(title: Swift.String, description: Swift.String, clientUrl: Swift.String)
  final public func connect(wallet: DreamerlySdk.WalletType, completion: @escaping (Swift.Result<DreamerlySdk.WalletDetails, Swift.Error>) -> Swift.Void)
  final public func disconnect()
  final public func sign(wallet: DreamerlySdk.WalletType, message: Swift.String, completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol StoreInteractor {
  func getProducts(ids: [Swift.String]) -> Combine.AnyPublisher<Swift.Set<StoreKit.SKProduct>, Swift.Error>
  func purchaseProduct(productId: Swift.String) -> Combine.AnyPublisher<Swift.String, Swift.Error>
  func fetchReceipt() -> Combine.AnyPublisher<Foundation.Data, Swift.Error>
}
public struct RealStoreInteractor : DreamerlySdk.StoreInteractor {
  public init()
  public func getProducts(ids: [Swift.String]) -> Combine.AnyPublisher<Swift.Set<StoreKit.SKProduct>, Swift.Error>
  public func purchaseProduct(productId: Swift.String) -> Combine.AnyPublisher<Swift.String, Swift.Error>
  public func fetchReceipt() -> Combine.AnyPublisher<Foundation.Data, Swift.Error>
}
final public class StubStoreInteractor : DreamerlySdk.StoreInteractor {
  public init()
  final public func getProducts(ids: [Swift.String]) -> Combine.AnyPublisher<Swift.Set<StoreKit.SKProduct>, Swift.Error>
  final public func purchaseProduct(productId: Swift.String) -> Combine.AnyPublisher<Swift.String, Swift.Error>
  final public func fetchReceipt() -> Combine.AnyPublisher<Foundation.Data, Swift.Error>
  @objc deinit
}
public struct LoginViewSdk : SwiftUI.View {
  public var loginWith: (_ walletType: DreamerlySdk.WalletType) -> ()
  public init(loginWith: @escaping (_ walletType: DreamerlySdk.WalletType) -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12DreamerlySdk09LoginViewB0V4bodyQrvp", 0) __
}
public enum WalletType : Swift.String, Swift.Equatable {
  case MetaMask
  case Rainbow
  case TrustWallet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Wallet : Swift.Equatable {
  public let type: DreamerlySdk.WalletType
  public let address: Swift.String
  public let chainId: Swift.String
  public static func == (a: DreamerlySdk.Wallet, b: DreamerlySdk.Wallet) -> Swift.Bool
}
public struct User : Swift.Equatable {
  public init(wallet: DreamerlySdk.Wallet)
  public let wallet: DreamerlySdk.Wallet
  public static func == (a: DreamerlySdk.User, b: DreamerlySdk.User) -> Swift.Bool
}
public enum UserState : Swift.Equatable {
  case unregistered
  case loggedIn(DreamerlySdk.User)
  case sessionExpired(DreamerlySdk.User)
  public static func == (a: DreamerlySdk.UserState, b: DreamerlySdk.UserState) -> Swift.Bool
}
extension DreamerlySdk.WalletType : Swift.Hashable {}
extension DreamerlySdk.WalletType : Swift.RawRepresentable {}
